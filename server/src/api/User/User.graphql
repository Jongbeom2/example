type Query {
  getUser(_id: ID!): User!
  getUserList(_id: ID!): [User!]!
}

type User {
  _id: ID!
  email: String
  password: String
  nickname: String
  profileImageURL: String
  profileThumbnailImageURL: String
  loginType: String!
  kakaoId: String
  roomIdList: [ID!]!
  roomList: [Room!]!
}

type Mutation {
  signIn(signInInput: SignInInput!): User!
  signInWithKakao(signInWithKakaoInput: SignInWithKakaoInput!): User!
  signInWithApple(signInWithAppleInput: SignInWithAppleInput!): User!
  signOut(signOutInput: SignOutInput!): User!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input SignInInput {
  email: String!
  password: String!
  fcmToken: String
}

input SignOutInput {
  _id: ID!
  fcmToken: String
}

input SignInWithKakaoInput {
  accessToken: String!
  fcmToken: String
}

input SignInWithAppleInput {
  identityToken: String!
  fcmToken: String
}

input CreateUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  _id: ID!
  nickname: String!
  profileImageURL: String
  profileThumbnailImageURL: String
}
